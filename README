# One Piece Card Game - Ability System Documentation

This documentation covers the complete ability system as implemented in the One Piece card game, providing a reference for creating new cards and understanding existing mechanics.

## Table of Contents
1. [Ability Types](#ability-types)
2. [Conditions](#conditions)
3. [Targeting System](#targeting-system)
4. [Actions](#actions)
5. [Card States](#card-states)
6. [Game Phases](#game-phases)
7. [Card Structure](#card-structure)
8. [Examples](#examples)

---

## Ability Types

### Core Ability Types
```json
{
    "type": "ABILITY_TYPE"
}
```

| Type | Description | When Triggered |
|------|-------------|----------------|
| `BLOCKER` | Allows card to block attacks | When opponent declares attack |
| `ON_BLOCK` | Triggered when this card blocks | After blocking is declared |
| `ON_ATTACK` | Triggered when this card attacks | When declaring attack |
| `ON_PLAY` | Triggered when card enters play | When played from hand |
| `ON_DEFEAT` | Triggered when card is defeated | When card is destroyed |
| `ACTIVATE` | Manual activation ability | Player chooses when to activate |
| `PASSIVE` | Always active while in play | Continuous effect |
| `ON_DON_ATTACH` | Triggered when DON is attached | When DON card is attached |
| `COUNTER` | Can be used from hand during attacks | During attack resolution |

---

## Conditions

Conditions determine when an ability can be activated or triggered.

### Condition Structure
```json
{
    "conditions": [
        {"type": "CONDITION_TYPE", "value": true/false/number}
    ]
}
```

### Available Conditions

#### 1. **CAN_BLOCK**
```json
{"type": "CAN_BLOCK", "value": true}
```
- **Description**: Checks if the card can block attacks
- **Values**: `true` (can block), `false` (cannot block)

#### 2. **ATTACHED_DON**
```json
{"type": "ATTACHED_DON", "value": 1}
```
- **Description**: Requires specific number of DON attached to card
- **Values**: Number (minimum DON required)

#### 3. **CHECK_TARGETS**
```json
{"type": "CHECK_TARGETS", "value": true}
```
- **Description**: Validates if valid targets exist for the ability
- **Values**: `true` (targets must exist), `false` (no targets should exist)

#### 4. **CARD_STATE**
```json
{"type": "CARD_STATE", "value": "RESTED"}
```
- **Description**: Checks the card's current state
- **Values**: Any valid card state (see Card States section)

#### 5. **PLAYER_TURN**
```json
{"type": "PLAYER_TURN", "value": true}
```
- **Description**: Checks if it's the card owner's turn
- **Values**: `true` (owner's turn), `false` (opponent's turn)

#### 6. **LIFE_COUNT**
```json
{"type": "LIFE_COUNT", "operator": "<=", "value": 3}
```
- **Description**: Checks player's life count
- **Operators**: `<=`, `>=`, `==`, `<`, `>`
- **Values**: Number

---

## Targeting System

### Target Structure
```json
{
    "name": "target",
    "params": {
        "target": {
            "targetAction": "ACTION_TYPE",
            "requiredTargets": 1,
            "targets": [TARGET_DEFINITION]
        }
    }
}
```

### Target Actions
| Action | Description |
|--------|-------------|
| `ABILITY_ACTION` | Target for ability effect |
| `ATTACK_TARGET` | Target for attack |
| `BLOCK_TARGET` | Target to block |

### Target Definition
```json
{
    "minrequiredtargets": 0,
    "maxrequiredtargets": 1,
    "cardtypes": ["CHARACTER"],
    "states": ["ALL_IN_PLAY_STATES"],
    "colors": ["BLUE", "RED"],
    "cost": {"operator": "<=", "value": 2},
    "power": {"operator": ">=", "value": 4000},
    "types": ["The Seven Warlords of the Sea"],
    "attributes": ["SPECIAL"],
    "location": "CHARACTER_AREA"
}
```

### Target Parameters

#### **cardtypes**
- **Values**: `["CHARACTER", "EVENT", "STAGE", "LEADER"]`
- **Description**: Types of cards that can be targeted

#### **states**
- **Values**: See Card States section
- **Special**: `"ALL_IN_PLAY_STATES"` targets all cards in play

#### **colors**
- **Values**: `["RED", "BLUE", "GREEN", "BLACK", "YELLOW", "PURPLE"]`
- **Description**: Card colors that can be targeted

#### **cost**
- **Structure**: `{"operator": "OPERATOR", "value": NUMBER}`
- **Operators**: `<=`, `>=`, `==`, `<`, `>`
- **Description**: Cost restrictions for targeting

#### **power**
- **Structure**: `{"operator": "OPERATOR", "value": NUMBER}`
- **Description**: Power restrictions for targeting

#### **types**
- **Values**: Array of card type strings
- **Description**: Specific card types (traits) that can be targeted

#### **attributes**
- **Values**: `["SLASH", "STRIKE", "RANGED", "SPECIAL"]`
- **Description**: Card attributes that can be targeted

#### **location**
- **Values**: `"CHARACTER_AREA"`, `"HAND"`, `"DECK"`, `"DISCARD"`, `"LIFE"`
- **Description**: Where valid targets must be located

---

## Actions

Actions define what happens when an ability is activated.

### Action Structure
```json
{
    "actions": [
        {"name": "ACTION_NAME", "params": {PARAMETERS}}
    ]
}
```

### Available Actions

#### 1. **target**
```json
{"name": "target", "params": {"target": TARGET_DEFINITION}}
```
- **Description**: Define targeting for the ability

#### 2. **returnCardToDeck**
```json
{"name": "returnCardToDeck", "params": {"target": "TARGET", "to": "BOTTOM"}}
```
- **Parameters**:
  - `target`: `"TARGET"` (use targeted card) or specific card reference
  - `to`: `"TOP"` or `"BOTTOM"` of deck

#### 3. **moveCardsToDeck**
```json
{"name": "moveCardsToDeck", "params": {"from": "TOP", "to": "BOTTOM", "numberOfCards": 1}}
```
- **Parameters**:
  - `from`: `"TOP"`, `"BOTTOM"`, `"SELECTION"`
  - `to`: `"TOP"`, `"BOTTOM"`
  - `numberOfCards`: Number of cards to move

#### 4. **drawCards**
```json
{"name": "drawCards", "params": {"amount": 2}}
```
- **Parameters**:
  - `amount`: Number of cards to draw

#### 5. **discardCard**
```json
{"name": "discardCard", "params": {"target": "TARGET"}}
```
- **Parameters**:
  - `target`: Card to discard

#### 6. **addPowerToCard**
```json
{"name": "addPowerToCard", "params": {"target": "TARGET", "power": 2000, "duration": "TURN"}}
```
- **Parameters**:
  - `target`: Card to modify
  - `power`: Power amount to add
  - `duration`: `"TURN"`, `"PERMANENT"`, `"BATTLE"`

#### 7. **changeCardState**
```json
{"name": "changeCardState", "params": {"target": "TARGET", "state": "RESTED"}}
```
- **Parameters**:
  - `target`: Card to modify
  - `state`: New state for the card

#### 8. **attachDonCard**
```json
{"name": "attachDonCard", "params": {"amount": 1}}
```
- **Parameters**:
  - `amount`: Number of DON to attach

#### 9. **createAura**
```json
{"name": "createAura", "params": {"effect": "POWER_BOOST", "value": 1000}}
```
- **Parameters**:
  - `effect`: Type of aura effect
  - `value`: Numerical value for effect

#### 10. **addCounterToCard**
```json
{"name": "addCounterToCard", "params": {"target": "TARGET", "amount": 1}}
```
- **Parameters**:
  - `target`: Card to add counter to
  - `amount`: Number of counters to add

#### 11. **activateExertedDon**
```json
{"name": "activateExertedDon", "params": {"amount": 1}}
```
- **Parameters**:
  - `amount`: Number of DON to activate

#### 12. **restDon**
```json
{"name": "restDon", "params": {"amount": 1}}
```
- **Parameters**:
  - `amount`: Number of DON to rest

#### 13. **returnDonToDeck**
```json
{"name": "returnDonToDeck", "params": {"amount": 1}}
```
- **Parameters**:
  - `amount`: Number of DON to return to deck

#### 14. **returnCardToHand**
```json
{"name": "returnCardToHand", "params": {"target": "TARGET"}}
```
- **Parameters**:
  - `target`: Card to return to hand

#### 15. **selectCards**
```json
{"name": "selectCards", "params": {"location": "DECK", "amount": 3}}
```
- **Parameters**:
  - `location`: Where to select from
  - `amount`: Number of cards to select

#### 16. **createSelectionManager**
```json
{"name": "createSelectionManager", "params": {"type": "CARD_SELECTION"}}
```
- **Parameters**:
  - `type`: Type of selection interface to create

#### 17. **hideSelectionManager**
```json
{"name": "hideSelectionManager", "params": {}}
```
- **Description**: Closes any active selection interface

---

## Card States

### Play States
- `IN_PLAY` - Card is in the character area
- `IN_PLAY_FIRST_TURN` - Card was just played this turn
- `IN_PLAY_BLOCKING` - Card is currently blocking
- `IN_PLAY_ATTACKING` - Card is currently attacking

### Position States
- `ACTIVE` - Card is in active position (can attack/activate)
- `RESTED` - Card is in rested position (cannot attack/activate)

### Location States
- `IN_HAND` - Card is in player's hand
- `IN_DECK` - Card is in player's deck
- `IN_DISCARD` - Card is in discard pile
- `IN_LIFE` - Card is in life area
- `IN_DON_DECK` - Card is in DON deck
- `IN_CHARACTER_AREA` - Card is in character area

### Special Collections
- `ALL_IN_PLAY_STATES` - Matches any card in play
- `ALL_RESTED_STATES` - Matches any rested card
- `ALL_ACTIVE_STATES` - Matches any active card

---

## Game Phases

Abilities can be restricted to specific game phases:

### Main Phases
- `"Main: Play"` - During main phase when playing cards
- `"Main: Attack"` - During main phase when declaring attacks
- `"Main: Block"` - During main phase when blocking
- `"Main: Activate"` - During main phase for manual activation

### Special Phases
- `"Counter"` - During counter timing
- `"End"` - During end phase
- `"DON"` - During DON phase

---

## Card Structure

### Basic Card Structure
```json
{
    "id": 402,
    "setid": 3,
    "banned": false,
    "art": "ST03-003",
    "set": "ST03",
    "setname": "-THE SEVEN WARLORDS OF THE SEA- [ST03]",
    "name": "Crocodile",
    "card": "CHARACTER",
    "type": ["The Seven Warlords of the Sea", "Baroque Works"],
    "colors": ["BLUE"],
    "cost": 5,
    "power": 6000,
    "attribute": "SPECIAL",
    "isleader": 0,
    "rarity": "SUPER RARE"
}
```

### Animation Info Structure
```json
{
    "animationinfo": {
        "speeches": {
            "intro": "You're standing in a desert... and I control every grain of it.",
            "attack": "You're already dust!",
            "defeated": "Tch... This isn't over. Not by a long shot."
        }
    }
}
```

### Ability Structure
```json
{
    "abilities": [
        {
            "id": "ST03-003-1",
            "text": "After your opponent declares an attack, you may rest this card to make it the new target of the attack.",
            "art": {
                "art": "ST03-003-BLOCKER",
                "posx": 300,
                "posy": 548
            },
            "type": "BLOCKER",
            "phases": ["Main: Block"],
            "states": ["IN_PLAY", "IN_PLAY_FIRST_TURN"],
            "conditions": [
                {"type": "CAN_BLOCK", "value": true}
            ],
            "actions": [
                {"name": "target", "params": {...}},
                {"name": "actionName", "params": {...}}
            ]
        }
    ]
}
```

---

## Examples

### Example 1: Basic Blocker (Crocodile - ST03-003)
```json
{
    "id": "ST03-003-1",
    "text": "After your opponent declares an attack, you may rest this card to make it the new target of the attack.",
    "type": "BLOCKER",
    "phases": ["Main: Block"],
    "states": ["IN_PLAY", "IN_PLAY_FIRST_TURN"],
    "conditions": [
        {"type": "CAN_BLOCK", "value": true}
    ]
}
```

### Example 2: Targeted Ability with Cost (Crocodile - ST03-003)
```json
{
    "id": "ST03-003-2",
    "text": "Place up to 1 Character with a cost of 2 or less at the bottom of the owner's deck.",
    "type": "ON_BLOCK",
    "phases": ["Main: Block"],
    "states": ["IN_PLAY_BLOCKING"],
    "conditions": [
        {"type": "ATTACHED_DON", "value": 1},
        {"type": "CHECK_TARGETS", "value": true}
    ],
    "actions": [
        {"name": "target", "params": {
            "target": {
                "targetAction": "ABILITY_ACTION",
                "requiredTargets": 1,
                "targets": [
                    {
                        "minrequiredtargets": 0,
                        "maxrequiredtargets": 1,
                        "cardtypes": ["CHARACTER"],
                        "states": ["ALL_IN_PLAY_STATES"],
                        "cost": {"operator": "<=", "value": 2}
                    }
                ]
            }
        }},
        {"name": "returnCardToDeck", "params": {"target": "TARGET", "to": "BOTTOM"}}
    ]
}
```

### Example 3: Power Boost Ability
```json
{
    "id": "EXAMPLE-POWER-BOOST",
    "text": "Give +2000 power to target character until end of turn.",
    "type": "ACTIVATE",
    "phases": ["Main: Activate"],
    "states": ["IN_PLAY"],
    "conditions": [
        {"type": "CHECK_TARGETS", "value": true}
    ],
    "actions": [
        {"name": "target", "params": {
            "target": {
                "targetAction": "ABILITY_ACTION",
                "requiredTargets": 1,
                "targets": [
                    {
                        "minrequiredtargets": 1,
                        "maxrequiredtargets": 1,
                        "cardtypes": ["CHARACTER"],
                        "states": ["ALL_IN_PLAY_STATES"]
                    }
                ]
            }
        }},
        {"name": "addPowerToCard", "params": {"target": "TARGET", "power": 2000, "duration": "TURN"}}
    ]
}
```

### Example 4: Card Draw Ability
```json
{
    "id": "EXAMPLE-DRAW",
    "text": "Draw 2 cards.",
    "type": "ON_PLAY",
    "phases": ["Main: Play"],
    "states": ["IN_PLAY"],
    "conditions": [],
    "actions": [
        {"name": "drawCards", "params": {"amount": 2}}
    ]
}
```

### Example 5: DON Manipulation
```json
{
    "id": "EXAMPLE-DON",
    "text": "Activate 2 rested DON cards.",
    "type": "ACTIVATE",
    "phases": ["Main: Activate"],
    "states": ["IN_PLAY"],
    "conditions": [],
    "actions": [
        {"name": "activateExertedDon", "params": {"amount": 2}}
    ]
}
```

---

## File Locations

- **Card Data**: `server/assets/data/card_data/`
- **Ability Actions**: `client/lib/ability_factory/ability.js`
- **Server Ability Logic**: `server/lib/ability_manager/server_ability.js`
- **Targeting Manager**: `server/lib/managers/targeting_manager.js`

---

## Best Practices

1. **Always include `CHECK_TARGETS`** condition when using targeting actions
2. **Use appropriate phases** for different ability types
3. **Include proper state restrictions** to prevent abilities from triggering at wrong times
4. **Test all targeting parameters** to ensure they work as expected
5. **Use descriptive ability IDs** that include the card set and ability number
6. **Include proper animation info** for character speeches and effects

This documentation should be updated whenever new ability types, conditions, or actions are added to the system.